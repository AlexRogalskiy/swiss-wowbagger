apply plugin: 'kotlin-platform-jvm'
apply plugin: 'signing'
apply plugin: 'maven-publish'
//apply plugin: 'io.codearte.nexus-staging'

dependencies {
    expectedBy project(':common')
    compile libraries.kotlin_stdlib
    compile libraries.kotlin_stdlib_jdk8
    compile "guru.nidi:mbrola-jvm:0.0.1"
    testCompile libraries.junit
    testCompile libraries.kotlin_test
}

// this is needed because intellij does not include build/resources/main in the classpath
task copyResources(type: Copy) {
    from "${projectDir}/src/main/resources"
    into "${buildDir}/classes/main"
}
processResources.dependsOn copyResources

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.kotlin
    from project(':common').sourceSets.main.kotlin
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId 'swiss-wowbagger'
            from components.java

            artifact sourcesJar
            artifact javadocJar
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = ''
                password = ''
            }
        }
    }
}

//        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"


if (project.hasProperty('release')) {

    subprojects {

        task javadocJar(type: Jar) {
            classifier = 'javadoc'
            from javadoc
        }

        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        artifacts {
            archives javadocJar, sourcesJar
        }
    }

    allprojects {
        apply plugin: 'signing'
        apply plugin: 'maven'

        // Signature of artifacts
        signing {
            sign configurations.archives
        }

        // OSSRH publication
        uploadArchives {
            repositories {
                mavenDeployer {
                    // POM signature
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                    // Target repository
                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: ossrhUser, password: ossrhPassword)
                    }
                    pom.project {
                        name project.name
                        description project.description
                        packaging 'jar'
                        url 'https://github.com/your/project'

                        scm {
                            connection 'scm:git:https://github.com/your/project.git'
                            developerConnection 'scm:git:git@github.com:your/project.git'
                            url 'https://github.com/your/project.git'
                        }

                        licenses {
                            license {
                                name 'The MIT License (MIT)'
                                url 'http://opensource.org/licenses/MIT'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id = 'youraccount'
                                name = 'Your Name'
                                email = 'your.account@mail.com'
                            }
                        }
                    }
                }
            }
        }

    }
}

//nexusStaging {
//    username = ossrhUser
//    password = ossrhPassword
//}

